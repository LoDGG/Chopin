{"ast":null,"code":"var _jsxFileName = \"H:\\\\Documents\\\\AnaisGame\\\\chopin\\\\src\\\\SongSelection.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, InputGroup, FormControl, Row, Card, Button } from 'react-bootstrap';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { useGameContext } from './context/GameContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = \"e9f2d6bd6f3a4badbd019e27348cc60b\";\nconst CLIENT_SECRET = \"af29a25fdd984740bf53174f77c78b13\";\nfunction SongSelection() {\n  _s();\n  const [data, setData] = useState(\"\");\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [tracks, setTracks] = useState([]);\n  const {\n    playlist,\n    setPlaylist\n  } = useGameContext();\n  const {\n    playerList,\n    setPlayerList\n  } = useGameContext();\n  const [currentPlayerId, setCurrentPlayerId] = useState(0);\n  const [currentPlayer, setCurrentPlayer] = useState(playerList[currentPlayerId]);\n  console.log(\"Playlist: \", playlist);\n  const navigate = useNavigate();\n  const {\n    n,\n    setN\n  } = useGameContext();\n  const getData = async () => {\n    const response = await Axios.get(\"http://localhost:3000/getData\");\n    setData(response.data);\n  };\n  useEffect(() => {\n    var authParameters = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: 'grant_type=client_credentials&client_id=' + CLIENT_ID + '&client_secret=' + CLIENT_SECRET\n    };\n    fetch(\"https://accounts.spotify.com/api/token\", authParameters).then(result => result.json()).then(data => setAccessToken(data.access_token)).catch(error => console.log(error));\n\n    // getData();\n  }, []);\n  useEffect(() => {\n    if (searchInput.trim() === '') return; // Do nothing if searchInput is empty\n    search();\n  }, [searchInput]); // Dependency array includes searchInput\n\n  useEffect(() => {\n    setCurrentPlayer(playerList[currentPlayerId]);\n  }, [currentPlayerId]);\n\n  //Search\n  async function search() {\n    console.log(\"searching for: \" + searchInput);\n\n    // Get request using seach to get artistID\n    var searchParameters = {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + accessToken\n      }\n    };\n    var tracks = await fetch('https://api.spotify.com/v1/search?q=' + searchInput + '&type=track', searchParameters).then(response => response.json()).then(data => {\n      console.log(data);\n      setTracks(data.tracks.items);\n    }).catch(error => console.log(error));\n  }\n  const handleCardClick = track => {\n    setTracks([]);\n    setSearchInput(\"\");\n    setCurrentPlayerId(currentPlayerId + 1);\n    setPlaylist(prevPlaylist => {\n      const newPlaylist = [...prevPlaylist, track]; // Create the new playlist with the new track\n\n      // Check if the new playlist length matches playerList length\n      if (newPlaylist.length === playerList.length * n) {\n        navigate('/game'); // Navigate to login if lengths match\n      }\n      return newPlaylist; // Return the updated playlist\n    });\n    console.log(\"PlayerList: \", playerList);\n    console.log(\"Playlist: \", playlist);\n\n    // Add logic to handle the click event, such as navigating to a new page or playing a song\n  };\n  const nextButtonHandler = () => {\n    console.log(searchInput);\n    console.log(\"Playlist: \", playlist);\n    setTracks([]);\n    setSearchInput(\"\");\n    setCurrentPlayerId(currentPlayerId + 1);\n    if (playlist.length == playerList.length) {\n      navigate('/login');\n    }\n  };\n\n  // Display all the albums\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playerName\",\n        children: [\" \", currentPlayer, \" choisit un son  \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n        className: \"mb-3\",\n        size: \"lg\",\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          placeholder: \"Search For Song\",\n          type: \"input\",\n          value: searchInput,\n          onKeyPress: e => {\n            if (e.key === 'Enter') {\n              console.log(\"pressed enter\");\n            }\n          },\n          onChange: e => {\n            setSearchInput(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: nextButtonHandler,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"mx-2 row row-cols-4\",\n        children: tracks.map((track, i) => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            onClick: () => handleCardClick(track),\n            className: \"clickable-card\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n              src: track.album.images[0].url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: track.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: track.artists[0].name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n}\n_s(SongSelection, \"8KFdpu9NXym6IE9u1nvoe4oXlNs=\", false, function () {\n  return [useGameContext, useGameContext, useNavigate, useGameContext];\n});\n_c = SongSelection;\nexport default SongSelection;\nvar _c;\n$RefreshReg$(_c, \"SongSelection\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Axios","Container","InputGroup","FormControl","Row","Card","Button","BrowserRouter","Router","Route","Routes","useNavigate","useGameContext","jsxDEV","_jsxDEV","CLIENT_ID","CLIENT_SECRET","SongSelection","_s","data","setData","searchInput","setSearchInput","accessToken","setAccessToken","tracks","setTracks","playlist","setPlaylist","playerList","setPlayerList","currentPlayerId","setCurrentPlayerId","currentPlayer","setCurrentPlayer","console","log","navigate","n","setN","getData","response","get","authParameters","method","headers","body","fetch","then","result","json","access_token","catch","error","trim","search","searchParameters","items","handleCardClick","track","prevPlaylist","newPlaylist","length","nextButtonHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","placeholder","type","value","onKeyPress","e","key","onChange","target","onClick","map","i","Img","src","album","images","url","Body","Title","name","Text","artists","_c","$RefreshReg$"],"sources":["H:/Documents/AnaisGame/chopin/src/SongSelection.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, InputGroup, FormControl, Row, Card, Button} from 'react-bootstrap';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { useGameContext } from './context/GameContext';\n\nconst CLIENT_ID = \"e9f2d6bd6f3a4badbd019e27348cc60b\";\nconst CLIENT_SECRET = \"af29a25fdd984740bf53174f77c78b13\";\n\nfunction SongSelection() {\n  const [data, setData] = useState(\"\");\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [tracks, setTracks] = useState([]);\n  const { playlist, setPlaylist } = useGameContext();\n  const { playerList, setPlayerList } = useGameContext();\n  const [currentPlayerId, setCurrentPlayerId] = useState(0)\n  const [currentPlayer, setCurrentPlayer] = useState(playerList[currentPlayerId]);\n  console.log(\"Playlist: \", playlist);\n  const navigate = useNavigate();\n  const {n, setN} = useGameContext();\n\n  \n\n  const getData = async () => {\n    const response = await Axios.get(\"http://localhost:3000/getData\");\n    setData(response.data);\n  }\n\n  useEffect(() => {\n    var authParameters = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: 'grant_type=client_credentials&client_id=' + CLIENT_ID + '&client_secret=' + CLIENT_SECRET\n    }\n    fetch(\"https://accounts.spotify.com/api/token\", authParameters)\n      .then(result => result.json())\n      .then(data => setAccessToken(data.access_token))\n      .catch(error => console.log(error))\n\n    // getData();\n  }, []); \n\n  useEffect(() => {\n    if (searchInput.trim() === '') return; // Do nothing if searchInput is empty\n    search();\n  }, [searchInput]); // Dependency array includes searchInput\n\n  useEffect(() => {\n    setCurrentPlayer(playerList[currentPlayerId])\n  }, [currentPlayerId]);\n\n\n  //Search\n  async function search() {\n    console.log(\"searching for: \" + searchInput);\n    \n    // Get request using seach to get artistID\n    var searchParameters = {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }\n\n    var tracks = await fetch('https://api.spotify.com/v1/search?q=' + searchInput + '&type=track' , searchParameters)\n      .then(response => response.json())\n      \n      .then(data => {\n        console.log(data)\n        setTracks(data.tracks.items)\n      })\n      .catch(error => console.log(error))\n  }\n\n\n\n\n  const handleCardClick = (track) => {\n    \n    setTracks([]);\n    setSearchInput(\"\");\n    setCurrentPlayerId(currentPlayerId + 1);\n\n\n    setPlaylist((prevPlaylist) => {\n      const newPlaylist = [...prevPlaylist, track]; // Create the new playlist with the new track\n  \n      // Check if the new playlist length matches playerList length\n      if (newPlaylist.length === playerList.length*n) {\n        navigate('/game'); // Navigate to login if lengths match\n      }\n  \n      return newPlaylist; // Return the updated playlist\n    });\n\n    console.log(\"PlayerList: \", playerList);\n    console.log(\"Playlist: \", playlist);\n\n    // Add logic to handle the click event, such as navigating to a new page or playing a song\n  };\n\n  const nextButtonHandler = () => {\n    console.log(searchInput);\n    console.log(\"Playlist: \", playlist);\n    setTracks([]);\n    setSearchInput(\"\");\n    setCurrentPlayerId(currentPlayerId + 1);\n    if (playlist.length == playerList.length ) {\n      navigate('/login');\n   }\n    \n  };\n\n\n    // Display all the albums\n\n\n\n\n\n    return (\n        \n        <div className=\"App\">\n        <Container>\n          <div className=\"playerName\" > {currentPlayer} choisit un son  </div>\n          <InputGroup className=\"mb-3\" size=\"lg\">\n            \n            <FormControl\n              placeholder=\"Search For Song\"\n              type=\"input\"\n              value={searchInput}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  console.log(\"pressed enter\");\n                }\n              }}\n              onChange={(e) => {\n                setSearchInput(e.target.value);\n              }}\n            ></FormControl>\n\n            <button onClick={nextButtonHandler}>Next</button>\n          </InputGroup>\n        </Container>\n\n        <Container>\n          <Row className=\"mx-2 row row-cols-4\">\n            {tracks.map( (track,i) => {\n              return (\n                <Card onClick={() => handleCardClick(track)} className=\"clickable-card\">\n                  <Card.Img src={track.album.images[0].url}/>\n                  <Card.Body>\n                    <Card.Title>{track.name}</Card.Title>\n                    <Card.Text>\n                      {track.artists[0].name}\n                    </Card.Text>\n\n                  </Card.Body>\n                </Card>\n              )\n            })}\n            \n          </Row>\n        </Container>\n\n\n        </div>\n    );\n    \n\n}\nexport default SongSelection\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}