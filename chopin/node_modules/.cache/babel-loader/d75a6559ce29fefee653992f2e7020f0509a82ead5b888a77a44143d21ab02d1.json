{"ast":null,"code":"var _jsxFileName = \"H:\\\\Documents\\\\AnaisGame\\\\chopin\\\\src\\\\context\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext();\nexport const useGameContext = () => {\n  _s();\n  return useContext(GameContext);\n};\n_s(useGameContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const GameProvider = ({\n  children\n}) => {\n  _s2();\n  // Retrieve playlist and playerList from localStorage (if they exist)\n  const initialPlaylist = JSON.parse(localStorage.getItem('playlist')) || [];\n  const initialGamePlaylist = JSON.parse(localStorage.getItem('gamePlaylist')) || [];\n  const initialPlayerList = JSON.parse(localStorage.getItem('playerList')) || [];\n  const initialPlaylistName = JSON.parse(localStorage.getItem('playlistName')) || '';\n  const initialN = JSON.parse(localStorage.getItem('n')) || 1;\n\n  // State for playlist and playerList\n  const [playlist, setPlaylist] = useState(initialPlaylist);\n  const [gamePlaylist, setGamePlaylist] = useState(initialGamePlaylist);\n  const [playerList, setPlayerList] = useState(initialPlayerList);\n  const [playlistName, setPlaylistName] = useState(initialPlaylistName);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [n, setN] = useState(initialN);\n\n  // Save the playlist to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('playlist', JSON.stringify(playlist));\n  }, [playlist]);\n\n  // Save the playerList to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('playerList', JSON.stringify(playerList));\n  }, [playerList]);\n  useEffect(() => {\n    localStorage.setItem('playlistName', JSON.stringify(playlistName));\n  }, [playlistName]);\n  useEffect(() => {\n    localStorage.setItem('playlistName', JSON.stringify(playlistName));\n  }, [gamePlaylist]);\n  useEffect(() => {\n    localStorage.setItem('playlistName', JSON.stringify(n));\n  }, [n]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      playlist,\n      setPlaylist,\n      playerList,\n      setPlayerList,\n      currentUser,\n      setCurrentUser,\n      playlistName,\n      setPlaylistName,\n      n,\n      setN,\n      gamePlaylist,\n      setGamePlaylist\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s2(GameProvider, \"gk/gCoo8GC/c0BDo2fxDnmYdw+A=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","GameContext","useGameContext","_s","GameProvider","children","_s2","initialPlaylist","JSON","parse","localStorage","getItem","initialGamePlaylist","initialPlayerList","initialPlaylistName","initialN","playlist","setPlaylist","gamePlaylist","setGamePlaylist","playerList","setPlayerList","playlistName","setPlaylistName","currentUser","setCurrentUser","n","setN","setItem","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["H:/Documents/AnaisGame/chopin/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n\r\nconst GameContext = createContext();\r\n\r\nexport const useGameContext = () => useContext(GameContext);\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  // Retrieve playlist and playerList from localStorage (if they exist)\r\n  const initialPlaylist = JSON.parse(localStorage.getItem('playlist')) || [];\r\n  const initialGamePlaylist = JSON.parse(localStorage.getItem('gamePlaylist')) || [];\r\n  const initialPlayerList = JSON.parse(localStorage.getItem('playerList')) || [];\r\n  const initialPlaylistName = JSON.parse(localStorage.getItem('playlistName')) || '';\r\n  const initialN = JSON.parse(localStorage.getItem('n')) || 1;\r\n\r\n  // State for playlist and playerList\r\n  const [playlist, setPlaylist] = useState(initialPlaylist);\r\n  const [gamePlaylist, setGamePlaylist] = useState(initialGamePlaylist);\r\n  const [playerList, setPlayerList] = useState(initialPlayerList);\r\n  const [playlistName, setPlaylistName] = useState(initialPlaylistName);\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [n, setN] = useState(initialN);\r\n\r\n  // Save the playlist to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('playlist', JSON.stringify(playlist));\r\n  }, [playlist]);\r\n\r\n  // Save the playerList to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('playerList', JSON.stringify(playerList));\r\n  }, [playerList]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('playlistName', JSON.stringify(playlistName));\r\n  }, [playlistName]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('playlistName', JSON.stringify(playlistName));\r\n  }, [gamePlaylist]);\r\n  \r\n  useEffect(() => {\r\n    localStorage.setItem('playlistName', JSON.stringify(n));\r\n  }, [n]);\r\n\r\n  return (\r\n    <GameContext.Provider value={{  playlist, setPlaylist, \r\n                                    playerList, setPlayerList, \r\n                                    currentUser, setCurrentUser, \r\n                                    playlistName, setPlaylistName,\r\n                                    n, setN, \r\n                                    gamePlaylist, setGamePlaylist, }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}